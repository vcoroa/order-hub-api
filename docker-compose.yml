version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: pedidos-postgres
    environment:
      POSTGRES_DB: pedidos_b2b
      POSTGRES_USER: pedidos_user
      POSTGRES_PASSWORD: pedidos_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pedidos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pedidos_user -d pedidos_b2b"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Aplicação Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pedidos-app
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/pedidos_b2b
      SPRING_DATASOURCE_USERNAME: pedidos_user
      SPRING_DATASOURCE_PASSWORD: pedidos_pass

      # JPA/Hibernate
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true

      # Server
      SERVER_PORT: 8080
      SERVER_SERVLET_CONTEXT_PATH: /api

      # Logging
      LOGGING_LEVEL_COM_PEDIDOSB2B: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: DEBUG
      LOGGING_LEVEL_ORG_HIBERNATE: WARN

      # Pool de conexões
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 20000
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 300000

      # Configurações de performance
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_SIZE: 25
      SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_INSERTS: true
      SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES: true
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_VERSIONED_DATA: true

      # Actuator
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized

      # Thread pool para processamento assíncrono
      SPRING_TASK_EXECUTION_POOL_CORE_SIZE: 10
      SPRING_TASK_EXECUTION_POOL_MAX_SIZE: 50
      SPRING_TASK_EXECUTION_POOL_QUEUE_CAPACITY: 100

    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pedidos-network
    volumes:
      - app_logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: pedidos-prometheus
    ports:
      - "9090:9090"
    networks:
      - pedidos-network
    restart: unless-stopped
    # Configuração prometheus inline
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml

  # pgAdmin para administração do banco
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pedidos-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - pedidos-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

networks:
  pedidos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  pgadmin_data:
    driver: local

# Configuração do Prometheus
configs:
  prometheus_config:
    content: |
      global:
        scrape_interval: 15s
      scrape_configs:
        - job_name: 'spring-actuator'
          metrics_path: '/api/actuator/prometheus'
          static_configs:
            - targets: ['app:8080']